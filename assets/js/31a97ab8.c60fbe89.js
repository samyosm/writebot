"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[333],{876:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return r?a.createElement(h,o(o({ref:t},p),{},{components:r})):a.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2009:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(2784),n=r(6277);const i="tabItem_OMyP";function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(i,o),hidden:r},t)}},1112:(e,t,r)=>{r.d(t,{Z:()=>d});var a=r(7896),n=r(2784),i=r(6277),o=r(9741),s=r(2244),l=r(8963),u=r(4126);const p="tabList_M0Dn",c="tabItem_ysIP";function m(e){const{lazy:t,block:r,defaultValue:o,values:m,groupId:d,className:h}=e,b=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??b.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),v=(0,s.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,l.U)(),[w,j]=(0,n.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=d){const e=y[d];null!=e&&e!==w&&f.some((t=>t.value===e))&&j(e)}const O=e=>{const t=e.currentTarget,r=T.indexOf(t),a=f[r].value;a!==w&&(N(t),j(a),null!=d&&k(d,String(a)))},E=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const r=T.indexOf(e.currentTarget)+1;t=T[r]??T[0];break}case"ArrowLeft":{const r=T.indexOf(e.currentTarget)-1;t=T[r]??T[T.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,i.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},h)},f.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:E,onClick:O},o,{className:(0,i.Z)("tabs__item",c,o?.className,{"tabs__item--active":w===t})}),r??t)}))),t?(0,n.cloneElement)(b.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,o.Z)();return n.createElement(m,(0,a.Z)({key:String(t)},e))}},9993:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var a=r(7896),n=(r(2784),r(876)),i=r(1112),o=r(2009);const s={sidebar_position:2},l="What is a preset?",u={unversionedId:"guides/what-is-a-preset",id:"guides/what-is-a-preset",title:"What is a preset?",description:"The preset is the query maker for Writebot.",source:"@site/docs/guides/what-is-a-preset.mdx",sourceDirName:"guides",slug:"/guides/what-is-a-preset",permalink:"/docs/guides/what-is-a-preset",draft:!1,editUrl:"https://github.com/samyosm/writebot/tree/main/apps/docs/docs/guides/what-is-a-preset.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Using Writebot",permalink:"/docs/guides/using-writebot"},next:{title:"Creating a preset",permalink:"/docs/guides/create-a-preset"}},p={},c=[{value:"Config",id:"config",level:2},{value:"Params",id:"params",level:2},{value:"Make query",id:"make-query",level:2}],m={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"what-is-a-preset"},"What is a preset?"),(0,n.kt)("p",null,"The preset is the query maker for Writebot."),(0,n.kt)("p",null,"Writebot's job is to send a query to GPT-3 and give you the answer. A preset's job is to make the query Writebot will send.\nIt will achieve this using the params you will provide them. Because it is important that a preset receives the good parameter, before making\nthe query, Writebot will ensure the parameter received are the one the preset wants."),(0,n.kt)("p",null,"Writebot will know what the right parameters are by validating the parameters using a validation library called ",(0,n.kt)("a",{parentName:"p",href:"https://docs.superstructjs.org"},"superstruct"),"."),(0,n.kt)("p",null,"Furthermore, Writebot has the feature of being able to call a preset using its name. That name is provided in a config object alongside the params object."),(0,n.kt)("p",null,"At the end, a preset is made of three things:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"config")," object with the preset's name and ",(0,n.kt)("inlineCode",{parentName:"li"},"params")," object."),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"params")," object to validate parameter."),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"makeQuery")," function that makes the query.")),(0,n.kt)("h2",{id:"config"},"Config"),(0,n.kt)("p",null,"The config object is a very simple object with only two elements in it: the preset's name and the params. Below is an example."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const config = {\n    preset: 'movie-review-gen',\n    params // The param object described below\n}\n")),(0,n.kt)("h2",{id:"params"},"Params"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"params")," object has the job of specifying structure of the parameters ",(0,n.kt)("inlineCode",{parentName:"p"},"makeQuery")," will need. For example, if ",(0,n.kt)("inlineCode",{parentName:"p"},"makeQuery")," needs a tone, and a movie title to make the query,\nthe params object might look something like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import { object, string } from 'superstruct';\n\nconst params = object({\n  tone: string(),\n  movieTitle: string(),\n});\n")),(0,n.kt)("h2",{id:"make-query"},"Make query"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"makeQuery")," function has the job of making the query from the parameters received. In the case above, to make a movie review query, it could look like this:"),(0,n.kt)(i.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"javascript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const makeQuery = ({ tone, movieTitle }) => {\n  return `\n  Generate a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  `;\n};\n"))),(0,n.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Infer } from 'superstruct';\n\nconst makeQuery = ({ tone, movieTitle }: Infer<typeof params>) => {\n  return `\n  Generate a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  `;\n};\n")))))}d.isMDXComponent=!0}}]);