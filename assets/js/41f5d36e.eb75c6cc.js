"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[722],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),v=a,d=c["".concat(s,".").concat(v)]||c[v]||m[v]||i;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=v;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},2009:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(2784),a=n(6277);const i="tabItem_OMyP";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},1112:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7896),a=n(2784),i=n(6277),l=n(9741),o=n(2244),s=n(8963),u=n(4126);const p="tabList_M0Dn",c="tabItem_ysIP";function m(e){const{lazy:t,block:n,defaultValue:l,values:m,groupId:v,className:d}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??g.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),f=(0,o.l)(b,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===l?l:l??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==h&&!b.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,s.U)(),[w,T]=(0,a.useState)(h),j=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=v){const e=y[v];null!=e&&e!==w&&b.some((t=>t.value===e))&&T(e)}const O=e=>{const t=e.currentTarget,n=j.indexOf(t),r=b[n].value;r!==w&&(N(t),T(r),null!=v&&k(v,String(r)))},I=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},d)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>j.push(e),onKeyDown:I,onClick:O},l,{className:(0,i.Z)("tabs__item",c,l?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,a.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function v(e){const t=(0,l.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},7446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var r=n(7896),a=(n(2784),n(876)),i=n(1112),l=n(2009);const o={sidebar_position:3},s="Creating a preset",u={unversionedId:"guides/create-a-preset",id:"guides/create-a-preset",title:"Creating a preset",description:'In this short tutorial, you will learn how to create your own preset and use it in Writebot. If you don\'t know what a preset is, it is explained in "What is a preset?".',source:"@site/docs/guides/create-a-preset.md",sourceDirName:"guides",slug:"/guides/create-a-preset",permalink:"/docs/guides/create-a-preset",draft:!1,editUrl:"https://github.com/samyosm/writebot/tree/main/apps/docs/docs/guides/create-a-preset.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"What is a preset?",permalink:"/docs/guides/what-is-a-preset"},next:{title:"Presets",permalink:"/docs/category/presets"}},p={},c=[{value:"Creating the preset",id:"creating-the-preset",level:2},{value:"Params",id:"params",level:3},{value:"Make query",id:"make-query",level:3},{value:"Multiple queries",id:"multiple-queries",level:4},{value:"Config",id:"config",level:3},{value:"Creating the preset object",id:"creating-the-preset-object",level:3},{value:"Result",id:"result",level:3},{value:"Using the preset",id:"using-the-preset",level:2}],m={toc:c};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-a-preset"},"Creating a preset"),(0,a.kt)("p",null,"In this short tutorial, you will learn how to create your own preset and use it in Writebot. If you don't know what a preset is, it is explained in ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/what-is-a-preset"},'"What is a preset?"'),"."),(0,a.kt)("p",null,"We will be creating the preset for a movie review generator. Then, we will use it with Writebot."),(0,a.kt)("h2",{id:"creating-the-preset"},"Creating the preset"),(0,a.kt)("p",null,"A preset is made of three things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"config")," object with the preset's name and ",(0,a.kt)("inlineCode",{parentName:"li"},"params")," object."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"params")," object to validate parameter."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"makeQuery")," function that makes the query.")),(0,a.kt)("p",null,"We will start with the ",(0,a.kt)("strong",{parentName:"p"},"params")," object. Then we will write the ",(0,a.kt)("strong",{parentName:"p"},"query"),". And finally, we will end by writing the ",(0,a.kt)("strong",{parentName:"p"},"config"),"."),(0,a.kt)("h3",{id:"params"},"Params"),(0,a.kt)("p",null,"Our query will need a movie title string, a rating number between 0-5, and a tone. Our params will thus look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { string, number, size } from 'superstruct';\n\nconst params = object({\n  movieTitle: string(),\n  rating: size(number(), 0, 5), // This means number must be between 0 and 5.\n  tone: string()\n});\n")),(0,a.kt)("h3",{id:"make-query"},"Make query"),(0,a.kt)("p",null,"We will need to ask the AI to write a movie review based on a movie title, a rating, and a tone. One way of doing so is like the following:"),(0,a.kt)(i.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const makeQuery = ({ tone, movieTitle, rating }) => {\n  return `\n  Write a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  The rating given is ${rating}.\n  `;\n};\n"))),(0,a.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Infer } from 'superstruct';\n\nconst makeQuery = ({ tone, movieTitle, rating }: Infer<typeof params>) => {\n  return `\n  Write a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  The rating given is ${rating}.\n  `;\n};\n")))),(0,a.kt)("h4",{id:"multiple-queries"},"Multiple queries"),(0,a.kt)("p",null,"If you send an array of strings, it will return an array of OpenAI responses."),(0,a.kt)("h3",{id:"config"},"Config"),(0,a.kt)("p",null,"The config object is the simplest of all. Our preset name will be ",(0,a.kt)("inlineCode",{parentName:"p"},"movie-review-gen"),", and we've already defined our param object. All that is left is to put it all in the config object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = {\n  preset: 'movie-review-gen',\n  params,\n}\n")),(0,a.kt)("h3",{id:"creating-the-preset-object"},"Creating the preset object"),(0,a.kt)("p",null,"The preset object is made of the config, and the makeQuery function like so:"),(0,a.kt)(i.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const MovieReviewGen = { config, makeQuery };\n"))),(0,a.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Preset } from 'writebot';\n\nconst MovieReviewGen: Preset = { config, makeQuery };\n")))),(0,a.kt)("h3",{id:"result"},"Result"),(0,a.kt)("p",null,"The final result for our movie review generator should look like this:"),(0,a.kt)(i.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { string, number, size } from 'superstruct';\n\nconst params = object({\n    movieTitle: string(),\n    rating: size(number(), 0, 5), // This means number must be between 0 and 5.\n    tone: string()\n});\n\nconst makeQuery = ({ tone, movieTitle, rating }) => {\n    return `\n  Write a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  The rating given is ${rating}.\n  `;\n};\n\nconst config = {\n    preset: 'movie-review-gen',\n    params,\n}\n\nconst MovieReviewGen = { config, makeQuery };\n"))),(0,a.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Preset } from 'writebot';\nimport { string, number, size, Infer } from 'superstruct';\n\nconst params = object({\n  movieTitle: string(),\n  rating: size(number(), 0, 5), // This means number must be between 0 and 5.\n  tone: string()\n});\n\nconst makeQuery = ({ tone, movieTitle, rating }: Infer<typeof params>) => {\n  return `\n  Write a simple movie review for the movie title ${movieTitle} using the following tone ${tone}.\n  The rating given is ${rating}.\n  `;\n};\n\nconst config = {\n  preset: 'movie-review-gen',\n  params,\n}\n\nconst MovieReviewGen: Preset = { config, makeQuery };\n")))),(0,a.kt)("h2",{id:"using-the-preset"},"Using the preset"),(0,a.kt)("p",null,"Once you've created your preset, using it is very easy."),(0,a.kt)(i.Z,{defaultValue:"object",values:[{label:"Object",value:"object"},{label:"Name",value:"name"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"object",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Writebot } = require('writebot');\nconst MovieReviewGen = require('./movieReviewGen');\n\nWritebot.initialize({\n    apiKey: API_KEY /* API Key from openai */\n});\n\nWritebot.write(MovieReviewGen, {\n    movieTitle: 'Interstellar',\n    tone: 'Amazed',\n    rating: 5\n});\n"))),(0,a.kt)(l.Z,{value:"name",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Writebot } from 'writebot';\n\nWritebot.initialize({\n    apiKey: API_KEY /* API Key from openai */,\n    presets: [\n        require('./movieReviewGen')\n    ]\n});\n\nWritebot.write('movie-review-gen', { // Use the name you gave in the presets config object\n    movieTitle: 'Interstellar',\n    tone: 'Amazed',\n    rating: 5\n});\n")))))}v.isMDXComponent=!0}}]);